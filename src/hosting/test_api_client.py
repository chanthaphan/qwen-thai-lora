#!/usr/bin/env python3
"""
API Client Test Script
Comprehensive testing of the Thai Model FastAPI server
"""

import requests
import json
import time

class ThaiAPIClient:
    def __init__(self, base_url="http://localhost:8001"):
        self.base_url = base_url
        self.session = requests.Session()
    
    def test_connection(self):
        """Test if the server is running"""
        try:
            response = self.session.get(f"{self.base_url}/")
            return response.status_code == 200
        except requests.exceptions.ConnectionError:
            return False
    
    def get_server_info(self):
        """Get server information"""
        response = self.session.get(f"{self.base_url}/")
        return response.json()
    
    def health_check(self):
        """Check server health"""
        response = self.session.get(f"{self.base_url}/health")
        return response.json()
    
    def list_models(self):
        """List available models"""
        response = self.session.get(f"{self.base_url}/v1/models")
        return response.json()
    
    def summarize_text(self, text, max_tokens=150, temperature=0.7):
        """Summarize Thai text using the custom endpoint"""
        data = {
            "text": text,
            "max_tokens": max_tokens,
            "temperature": temperature
        }
        response = self.session.post(f"{self.base_url}/v1/summarize", json=data)
        return response.json()
    
    def chat_completion(self, messages, max_tokens=150, temperature=0.7):
        """Chat completion using OpenAI-compatible endpoint"""
        data = {
            "model": "thai-qwen-lora",
            "messages": messages,
            "max_tokens": max_tokens,
            "temperature": temperature
        }
        response = self.session.post(f"{self.base_url}/v1/chat/completions", json=data)
        return response.json()

def main():
    """Test all API endpoints"""
    print("üß™ Thai Model API Client Test")
    print("=" * 50)
    
    client = ThaiAPIClient()
    
    # Test connection
    print("\nüîå Testing connection...")
    if client.test_connection():
        print("‚úÖ Connected to API server")
    else:
        print("‚ùå Cannot connect to API server")
        print("üí° Make sure the server is running: ./manage.sh host-api")
        return 1
    
    # Server info
    print("\nüìã Server Information:")
    info = client.get_server_info()
    print(f"   Message: {info['message']}")
    print(f"   Model: {info['model']}")
    
    # Health check
    print("\nüè• Health Check:")
    health = client.health_check()
    print(f"   Status: {health['status']}")
    print(f"   Model Loaded: {health['model_loaded']}")
    
    # List models
    print("\nü§ñ Available Models:")
    models = client.list_models()
    for model in models['data']:
        print(f"   ‚Ä¢ {model['id']} (owned by: {model['owned_by']})")
    
    # Test summarization
    print("\nüìù Testing Text Summarization:")
    test_text = "‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏à‡∏≤‡∏Å‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏ä‡∏±‡πâ‡∏ô‡∏ô‡∏≥‡πÑ‡∏î‡πâ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏õ‡∏±‡∏ç‡∏ç‡∏≤‡∏õ‡∏£‡∏∞‡∏î‡∏¥‡∏©‡∏ê‡πå‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡πÇ‡∏£‡∏Ñ‡∏°‡∏∞‡πÄ‡∏£‡πá‡∏á‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û‡∏ñ‡πà‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏û‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏∞‡∏´‡∏ô‡∏±‡∏Å‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡πÑ‡∏î‡πâ‡∏ñ‡∏∂‡∏á 95% ‡∏ã‡∏∂‡πà‡∏á‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡πÅ‡∏ö‡∏ö‡∏î‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡∏∂‡∏á 15% ‡∏ô‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ô‡∏µ‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏±‡∏á‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡∏∂‡∏á 3 ‡πÄ‡∏ó‡πà‡∏≤"
    
    print(f"   Input: {test_text[:100]}...")
    
    start_time = time.time()
    summary_result = client.summarize_text(test_text, max_tokens=100)
    summary_time = time.time() - start_time
    
    print(f"   Summary: {summary_result['summary']}")
    print(f"   Tokens: {summary_result['usage']['total_tokens']}")
    print(f"   Time: {summary_time:.2f}s")
    
    # Test chat completion
    print("\nüí¨ Testing Chat Completion:")
    messages = [
        {"role": "user", "content": "‡∏™‡∏£‡∏∏‡∏õ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢"}
    ]
    
    start_time = time.time()
    chat_result = client.chat_completion(messages, max_tokens=80)
    chat_time = time.time() - start_time
    
    print(f"   Question: {messages[0]['content']}")
    print(f"   Response: {chat_result['choices'][0]['message']['content']}")
    print(f"   Tokens: {chat_result['usage']['total_tokens']}")
    print(f"   Time: {chat_time:.2f}s")
    
    # Performance summary
    print(f"\nüìä Performance Summary:")
    print(f"   ‚Ä¢ Summarization: {summary_time:.2f}s")
    print(f"   ‚Ä¢ Chat completion: {chat_time:.2f}s")
    print(f"   ‚Ä¢ Model loaded on first request")
    
    print(f"\nüéâ All API tests completed successfully!")
    print(f"üí° You can now integrate with this API using:")
    print(f"   ‚Ä¢ Python requests library")
    print(f"   ‚Ä¢ OpenAI Python client (chat completions)")
    print(f"   ‚Ä¢ cURL commands")
    print(f"   ‚Ä¢ Any HTTP client")

if __name__ == "__main__":
    import sys
    try:
        exit_code = main()
        sys.exit(exit_code if exit_code else 0)
    except KeyboardInterrupt:
        print("\nüõë Test interrupted by user")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Test failed: {e}")
        sys.exit(1)